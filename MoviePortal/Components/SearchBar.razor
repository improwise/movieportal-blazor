@using System.Timers
@implements IDisposable

<div class="search-container">
    <div class="search-input-wrapper">
        <input type="text" class="search-input" placeholder="Search for movies..."
               @bind-value="SearchTerm"
               @bind-value:event="oninput"
               @onkeyup="HandleKeyUp" />
        @if (IsSearching)
        {
            <div class="search-spinner"></div>
        }
    </div>
</div>

@code {
    private string SearchTerm = string.Empty;
    private Timer? debounceTimer;
    private bool IsSearching = false;

    [Parameter] public EventCallback<string> OnSearch { get; set; }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        debounceTimer?.Dispose();
        debounceTimer = new Timer(500);
        debounceTimer.Elapsed += DebounceTimerElapsed;
        debounceTimer.Start();
        IsSearching = true;
    }

    private void DebounceTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        debounceTimer?.Dispose();
        debounceTimer = null;
        InvokeAsync(async () =>
        {
            await OnSearch.InvokeAsync(SearchTerm);
            IsSearching = false;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}